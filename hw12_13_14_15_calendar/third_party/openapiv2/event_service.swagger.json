{
  "swagger": "2.0",
  "info": {
    "title": "event_service.proto",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "EventService"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/events": {
      "get": {
        "summary": "Get events",
        "description": "Get events from the server.",
        "operationId": "EventService_GetEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventEvents"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "periodStart",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "periodEnd",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "post": {
        "summary": "Add an event",
        "description": "Add an event to the server.",
        "operationId": "EventService_AddEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventAddEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventAddEventRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/api/events/{id}": {
      "get": {
        "summary": "Get an event by id",
        "description": "Get an event by id from the server.",
        "operationId": "EventService_GetEventByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "delete": {
        "summary": "Delete an event",
        "description": "Delete an event from the server.",
        "operationId": "EventService_DeleteEventByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventDeleteEventByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "put": {
        "summary": "Update an event",
        "description": "Update an event on the server.",
        "operationId": "EventService_UpdateEventByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/eventUpdateEventByIDResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "dateStart": {
                  "type": "string",
                  "format": "date-time"
                },
                "duration": {
                  "type": "string"
                },
                "notificationPeriod": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    }
  },
  "definitions": {
    "eventAddEventRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dateStart": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "string"
        },
        "notificationPeriod": {
          "type": "string"
        }
      }
    },
    "eventAddEventResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "eventDeleteEventByIDResponse": {
      "type": "object"
    },
    "eventEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dateStart": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "string"
        },
        "notificationPeriod": {
          "type": "string"
        },
        "sent": {
          "type": "boolean"
        }
      }
    },
    "eventEvents": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventEvent"
          }
        }
      }
    },
    "eventUpdateEventByIDResponse": {
      "type": "object"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "gRPC-gateway events calendar repository",
    "url": "https://github.com/AZhur771/otus-go-homework/tree/master/hw12_13_14_15_calendar"
  }
}
